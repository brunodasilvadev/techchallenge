name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish API project
      run: dotnet publish --configuration Release --output ./output/api

    - name: Publish Worker Service project
      run: dotnet publish --configuration Release --output ./output/worker

  unit-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run unit tests
      run: dotnet test --no-restore --verbosity normal ./src/TechChallenge.CadastroContato.UnitTests/TechChallenge.CadastroContato.UnitTests.csproj

  integration-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Start SQL Server
      run: |
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${{ secrets.SQL_SERVER_PASSWORD }}" -p 1433:1433 --name sql_server -d mcr.microsoft.com/mssql/server

    - name: Wait for SQL Server to start
      run: |
        for i in {1..30}; do
          if docker exec sql_server /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${{ secrets.SQL_SERVER_PASSWORD }} -Q "SELECT 1" >/dev/null 2>&1; then
            echo "SQL Server is up!"
            break
          fi
          echo "Waiting for SQL Server..."
          sleep 1
        done

    - name: Create database
      run: |
        docker run --rm --network host mcr.microsoft.com/mssql-tools sqlcmd -S localhost,1433 -U sa -P ${{ secrets.SQL_SERVER_PASSWORD }} -Q "CREATE DATABASE TECHCHALLENGE_TESTESINTEGRACAO"

    - name: Run integration tests
      run: dotnet test --configuration Release --logger trx

    - name: Publish test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: '**/*.trx'

    - name: Stop SQL Server
      run: docker stop sql_server

  deploy:
    runs-on: ubuntu-latest
    needs: [build, integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Apply Kubernetes configurations
      run: |
        kubectl apply -f configmap.yaml
        kubectl apply -f deployment-rabbitmq.yaml
        kubectl apply -f service-rabbitmq.yaml
        kubectl apply -f deployment-sqlserver.yaml
        kubectl apply -f service-sqlserver.yaml
        kubectl apply -f pvc-sqlserver.yaml
        kubectl apply -f deployment-api.yaml
        kubectl apply -f service-api.yaml
        kubectl apply -f deployment-amqpworker.yaml
        kubectl apply -f service-amqpworker.yaml
